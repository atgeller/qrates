decl is_reference(Type);
decl has_ref_field(Type);
decl returns_ref_field(Function);
decl fn_crate(Function, Crate);
decl fn_ref_field_return(Function, Crate);

is_reference(t) :- is_mutable_reference(t).
is_reference(t) :- is_shared_reference(t).
has_ref_field(t) :- is_struct_type(t, s), field_types(s, f), is_reference(f).
has_ref_field(t) :- is_struct_type(t, s), field_types(s, f), has_ref_field(f).
has_ref_field(t) :- tuple(t, f), is_reference(f).
has_ref_field(t) :- tuple(t, f), has_ref_field(f).
has_ref_field(t) :- slice(t, f), is_reference(f).
has_ref_field(t) :- slice(t, f), has_ref_field(f).

returns_ref_field(f) :- return_type(f, t), has_ref_field(t).
fn_crate(f, c) :- in_module(f, m), modules_in_crates(m, c).
fn_ref_field_return(f, c) :- returns_ref_field(f), fn_crate(f, c).

!csv(fn_ref_field_return, {
    |(f, c)| {
        writer.write_record(
            &[&c.0.to_string(), &orig_db.crates[c.0 as usize].1.name,
              &f.0.to_string(), &orig_db.functions[f.0 as usize].1.def_path]
        ).unwrap();
    }
});
