decl is_supported(Type);
decl returns_supported(Function);
decl fn_crate(Function, Crate);
decl fn_supported_value_return(Function, Crate);

is_supported(t) :- is_native(t).
is_supported(t) :- is_struct_type(t, s), field_types(s, f), is_supported(f).
is_supported(t) :- tuple(t, f), is_supported(f).

returns_supported(f) :- return_type(f, t), is_supported(t).
fn_crate(f, c) :- in_module(f, m), modules_in_crates(m, c).
fn_supported_value_return(f, c) :- returns_supported(f), fn_crate(f, c).

!csv(is_native, {
    |(t, )| {
        writer.write_record(
            &[&t.0.to_string()]
        ).unwrap();
    }
});

!csv(fn_supported_value_return, {
    |(f, c)| {
        writer.write_record(
            &[&c.0.to_string(), &orig_db.crates[c.0 as usize].1.name,
              &f.0.to_string(), &orig_db.functions[f.0 as usize].1.def_path]
        ).unwrap();
    }
});
