use std::str::FromStr;
use std::collections::BTreeMap;
use ast::*; // (0)

grammar;

pub RuleList: (Vec<Rule>, Vec<Decl>, Vec<Action>) = {
     => (Vec::new(), Vec::new(), Vec::new()),
    <rs: RuleList> <r: Rule> "." => {
        let mut rs = rs;
        rs.0.push(r);
        rs
    },
    <rs: RuleList> <r: Decl> ";" => {
        let mut rs = rs;
        rs.1.push(r);
        rs
    },
    <rs: RuleList> <a: Action> ";" => {
        let mut rs = rs;
        rs.2.push(a);
        rs
    }
};

Rule: Rule = {
    <name:Ident> "(" <args: CommaList<Ident>> ")" ":-" <rs: CommaList<Fact>> =>
        Rule{ name: name, args: args, facts: rs },
};

Decl: Decl = {
    "decl" <name:Ident> "(" <arg_types: CommaList<Ident>> ")" =>
        Decl{ name: name, arg_types: arg_types },
};

Fact: (Fact, bool) = {
    <x:("!")?> <i: Ident> "(" <args: CommaList<Ident>> ")" => (Fact{ name: i, args: args }, x.is_some())
};

CommaList<Rule>: Vec<Rule> = {
    <args: (<Rule> ",")*> <last: Rule?> => {
        let mut args = args;
        args.extend(last);
        args
    }
};

Ident: String = {
    r"[A-Za-z_][A-Za-z0-9_]*" => String::from(<>)
};

Action: Action = {
    "!" <name: Ident> "(" <target: Ident> "," <c:RustCode> ")" => Action{ name: name, target: target, rust_code: c }
}

RustCode: String = {
    r"\{(.|\s)*\}" => { let mut r_str = String::from(<>); let l = r_str.len(); r_str.remove(l - 1); r_str.remove(0); r_str }
}


