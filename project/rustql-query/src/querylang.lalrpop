use std::str::FromStr;
use std::collections::BTreeMap;
use ast::*; // (0)

grammar;

pub RuleList: (Vec<Rule>, Vec<Decl>) = {
     => (Vec::new(), Vec::new()),
    <rs: RuleList> <r: Rule> "." => {
        let mut rs = rs;
        rs.0.push(r);
        rs
    },
    <rs: RuleList> <r: Decl> ";" => {
        let mut rs = rs;
        rs.1.push(r);
        rs
    }
};

Rule: Rule = {
    <name:Ident> "(" <args: CommaList<Ident>> ")" ":-" <rs: CommaList<Fact>> =>
        Rule{ name: name, args: args, facts: rs },
};

Decl: Decl = {
    "decl" <name:Ident> "(" <arg_types: CommaList<Ident>> ")" =>
        Decl{ name: name, arg_types: arg_types },
};

Fact: Fact = {
    <i: Ident> "(" <args: CommaList<Ident>> ")" => Fact{ name: i, args: args }
};

CommaList<Rule>: Vec<Rule> = {
    <args: (<Rule> ",")*> <last: Rule?> => {
        let mut args = args;
        args.extend(last);
        args
    }
};

Ident: String = {
    r"[A-Za-z_][A-Za-z0-9_]*" => String::from(<>)
};

