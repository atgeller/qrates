(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Copy for Adler32","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl Copy for MatchKind","synthetic":false,"types":[]},{"text":"impl Copy for MatchKind","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Copy for Prefix","synthetic":false,"types":[]},{"text":"impl Copy for Infix","synthetic":false,"types":[]},{"text":"impl Copy for Suffix","synthetic":false,"types":[]},{"text":"impl Copy for Style","synthetic":false,"types":[]},{"text":"impl Copy for Colour","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Copy for Stream","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Copy for PrintFmt","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Copy for CharacterSet","synthetic":false,"types":[]},{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["bincode"] = [{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]},{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for NativeEndian","synthetic":false,"types":[]},{"text":"impl Copy for FixintEncoding","synthetic":false,"types":[]},{"text":"impl Copy for VarintEncoding","synthetic":false,"types":[]},{"text":"impl Copy for Bounded","synthetic":false,"types":[]},{"text":"impl Copy for Infinite","synthetic":false,"types":[]},{"text":"impl Copy for AllowTrailing","synthetic":false,"types":[]},{"text":"impl Copy for RejectTrailing","synthetic":false,"types":[]},{"text":"impl Copy for DefaultOptions","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Copy + Options, L:&nbsp;Copy + SizeLimit&gt; Copy for WithOtherLimit&lt;O, L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Copy + Options, E:&nbsp;Copy + BincodeByteOrder&gt; Copy for WithOtherEndian&lt;O, E&gt;","synthetic":false,"types":[]}];
implementors["bitmaps"] = [{"text":"impl&lt;Size:&nbsp;Bits&gt; Copy for Bitmap&lt;Size&gt;","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["bytesize"] = [{"text":"impl Copy for ByteSize","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl Copy for MessageFormat","synthetic":false,"types":[]},{"text":"impl Copy for CompileMode","synthetic":false,"types":[]},{"text":"impl Copy for CompileKind","synthetic":false,"types":[]},{"text":"impl Copy for CompileTarget","synthetic":false,"types":[]},{"text":"impl Copy for Freshness","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unit&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DefaultExecutor","synthetic":false,"types":[]},{"text":"impl Copy for Kind","synthetic":false,"types":[]},{"text":"impl Copy for Edition","synthetic":false,"types":[]},{"text":"impl Copy for InternedString","synthetic":false,"types":[]},{"text":"impl Copy for PackageId","synthetic":false,"types":[]},{"text":"impl Copy for ProfileRoot","synthetic":false,"types":[]},{"text":"impl Copy for Profile","synthetic":false,"types":[]},{"text":"impl Copy for Lto","synthetic":false,"types":[]},{"text":"impl Copy for PanicStrategy","synthetic":false,"types":[]},{"text":"impl Copy for UnitFor","synthetic":false,"types":[]},{"text":"impl Copy for ResolveVersion","synthetic":false,"types":[]},{"text":"impl Copy for Verbosity","synthetic":false,"types":[]},{"text":"impl Copy for ColorChoice","synthetic":false,"types":[]},{"text":"impl Copy for SourceId","synthetic":false,"types":[]},{"text":"impl Copy for VersionControl","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FixedOffset","synthetic":false,"types":[]},{"text":"impl Copy for Local","synthetic":false,"types":[]},{"text":"impl Copy for Utc","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDate","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Copy for IsoWeek","synthetic":false,"types":[]},{"text":"impl Copy for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Pad","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for RoundingError","synthetic":false,"types":[]},{"text":"impl Copy for Weekday","synthetic":false,"types":[]},{"text":"impl Copy for Month","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Copy for AppSettings","synthetic":false,"types":[]},{"text":"impl Copy for ArgSettings","synthetic":false,"types":[]},{"text":"impl Copy for Shell","synthetic":false,"types":[]},{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]}];
implementors["color_backtrace"] = [{"text":"impl Copy for Verbosity","synthetic":false,"types":[]}];
implementors["corpus_database"] = [{"text":"impl Copy for CrateHash","synthetic":false,"types":[]},{"text":"impl Copy for DefPathHash","synthetic":false,"types":[]},{"text":"impl Copy for AdtVariantIndex","synthetic":false,"types":[]},{"text":"impl Copy for TupleFieldIndex","synthetic":false,"types":[]},{"text":"impl Copy for FnParamIndex","synthetic":false,"types":[]},{"text":"impl Copy for OperandIndex","synthetic":false,"types":[]},{"text":"impl Copy for StatementIndex","synthetic":false,"types":[]},{"text":"impl Copy for CallArgIndex","synthetic":false,"types":[]},{"text":"impl Copy for Module","synthetic":false,"types":[]},{"text":"impl Copy for Item","synthetic":false,"types":[]},{"text":"impl Copy for Scope","synthetic":false,"types":[]},{"text":"impl Copy for FunctionCall","synthetic":false,"types":[]},{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Field","synthetic":false,"types":[]},{"text":"impl Copy for Operand","synthetic":false,"types":[]},{"text":"impl Copy for BasicBlock","synthetic":false,"types":[]},{"text":"impl Copy for Statement","synthetic":false,"types":[]},{"text":"impl Copy for InternedString","synthetic":false,"types":[]},{"text":"impl Copy for Package","synthetic":false,"types":[]},{"text":"impl Copy for PackageVersion","synthetic":false,"types":[]},{"text":"impl Copy for Krate","synthetic":false,"types":[]},{"text":"impl Copy for Edition","synthetic":false,"types":[]},{"text":"impl Copy for Name","synthetic":false,"types":[]},{"text":"impl Copy for RelativeDefId","synthetic":false,"types":[]},{"text":"impl Copy for SummaryId","synthetic":false,"types":[]},{"text":"impl Copy for Abi","synthetic":false,"types":[]},{"text":"impl Copy for DefPath","synthetic":false,"types":[]},{"text":"impl Copy for Build","synthetic":false,"types":[]},{"text":"impl Copy for SpanFileName","synthetic":false,"types":[]},{"text":"impl Copy for CrateCfgKey","synthetic":false,"types":[]},{"text":"impl Copy for CrateCfgValue","synthetic":false,"types":[]},{"text":"impl Copy for TyKind","synthetic":false,"types":[]},{"text":"impl Copy for StatementKind","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for NullOp","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl Copy for TerminatorKind","synthetic":false,"types":[]},{"text":"impl Copy for Mutability","synthetic":false,"types":[]},{"text":"impl Copy for Constness","synthetic":false,"types":[]},{"text":"impl Copy for Visibility","synthetic":false,"types":[]},{"text":"impl Copy for TyVisibility","synthetic":false,"types":[]},{"text":"impl Copy for Unsafety","synthetic":false,"types":[]},{"text":"impl Copy for ImplPolarity","synthetic":false,"types":[]},{"text":"impl Copy for ScopeSafety","synthetic":false,"types":[]},{"text":"impl Copy for AdtKind","synthetic":false,"types":[]},{"text":"impl Copy for TyPrimitive","synthetic":false,"types":[]},{"text":"impl Copy for TyDefKind","synthetic":false,"types":[]},{"text":"impl Copy for Defaultness","synthetic":false,"types":[]},{"text":"impl Copy for OperandKind","synthetic":false,"types":[]},{"text":"impl Copy for AggregateKind","synthetic":false,"types":[]},{"text":"impl Copy for CastKind","synthetic":false,"types":[]},{"text":"impl Copy for BorrowKind","synthetic":false,"types":[]},{"text":"impl Copy for BasicBlockKind","synthetic":false,"types":[]},{"text":"impl Copy for SpanExpansionKind","synthetic":false,"types":[]},{"text":"impl Copy for BlockCheckMode","synthetic":false,"types":[]}];
implementors["crates_io"] = [{"text":"impl Copy for Auth","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Copy for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl Copy for Algorithm","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl Copy for QuoteStyle","synthetic":false,"types":[]},{"text":"impl Copy for Terminator","synthetic":false,"types":[]},{"text":"impl Copy for Trim","synthetic":false,"types":[]}];
implementors["csv_core"] = [{"text":"impl Copy for Terminator","synthetic":false,"types":[]},{"text":"impl Copy for QuoteStyle","synthetic":false,"types":[]}];
implementors["curl"] = [{"text":"impl Copy for ProxyType","synthetic":false,"types":[]},{"text":"impl Copy for TimeCondition","synthetic":false,"types":[]},{"text":"impl Copy for IpResolve","synthetic":false,"types":[]},{"text":"impl Copy for HttpVersion","synthetic":false,"types":[]},{"text":"impl Copy for SslVersion","synthetic":false,"types":[]},{"text":"impl Copy for SeekResult","synthetic":false,"types":[]},{"text":"impl Copy for InfoType","synthetic":false,"types":[]},{"text":"impl Copy for NetRc","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl Copy for Style","synthetic":false,"types":[]},{"text":"impl Copy for Purpose","synthetic":false,"types":[]},{"text":"impl Copy for Ignored","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Copy for Target","synthetic":false,"types":[]},{"text":"impl Copy for WriteStyle","synthetic":false,"types":[]},{"text":"impl Copy for TimestampPrecision","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Copy for FileTime","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Copy for FlushCompress","synthetic":false,"types":[]},{"text":"impl Copy for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Copy for Parse&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Async&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AsyncSink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ExecuteErrorKind","synthetic":false,"types":[]},{"text":"impl Copy for Canceled","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Copy for Canceled","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Copy for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Copy for Format","synthetic":false,"types":[]},{"text":"impl Copy for Encoding","synthetic":false,"types":[]},{"text":"impl Copy for LineEncoding","synthetic":false,"types":[]},{"text":"impl Copy for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugAbbrevOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugAddrBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugAddrIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLineOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLineStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LocationListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLocListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugLocListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugMacinfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugMacroOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for RangeListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugRngListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugRngListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugStrOffsetsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugStrOffsetsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DebugTypeSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DebugFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for EhFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SectionId","synthetic":false,"types":[]},{"text":"impl Copy for DwoId","synthetic":false,"types":[]},{"text":"impl Copy for DwarfFileType","synthetic":false,"types":[]},{"text":"impl Copy for Arm","synthetic":false,"types":[]},{"text":"impl Copy for X86","synthetic":false,"types":[]},{"text":"impl Copy for X86_64","synthetic":false,"types":[]},{"text":"impl Copy for DwUt","synthetic":false,"types":[]},{"text":"impl Copy for DwCfa","synthetic":false,"types":[]},{"text":"impl Copy for DwChildren","synthetic":false,"types":[]},{"text":"impl Copy for DwTag","synthetic":false,"types":[]},{"text":"impl Copy for DwAt","synthetic":false,"types":[]},{"text":"impl Copy for DwForm","synthetic":false,"types":[]},{"text":"impl Copy for DwAte","synthetic":false,"types":[]},{"text":"impl Copy for DwLle","synthetic":false,"types":[]},{"text":"impl Copy for DwDs","synthetic":false,"types":[]},{"text":"impl Copy for DwEnd","synthetic":false,"types":[]},{"text":"impl Copy for DwAccess","synthetic":false,"types":[]},{"text":"impl Copy for DwVis","synthetic":false,"types":[]},{"text":"impl Copy for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Copy for DwLang","synthetic":false,"types":[]},{"text":"impl Copy for DwAddr","synthetic":false,"types":[]},{"text":"impl Copy for DwId","synthetic":false,"types":[]},{"text":"impl Copy for DwCc","synthetic":false,"types":[]},{"text":"impl Copy for DwInl","synthetic":false,"types":[]},{"text":"impl Copy for DwOrd","synthetic":false,"types":[]},{"text":"impl Copy for DwDsc","synthetic":false,"types":[]},{"text":"impl Copy for DwIdx","synthetic":false,"types":[]},{"text":"impl Copy for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Copy for DwLns","synthetic":false,"types":[]},{"text":"impl Copy for DwLne","synthetic":false,"types":[]},{"text":"impl Copy for DwLnct","synthetic":false,"types":[]},{"text":"impl Copy for DwMacro","synthetic":false,"types":[]},{"text":"impl Copy for DwRle","synthetic":false,"types":[]},{"text":"impl Copy for DwOp","synthetic":false,"types":[]},{"text":"impl Copy for DwEhPe","synthetic":false,"types":[]},{"text":"impl Copy for RunTimeEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]},{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugAddr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for DebugFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for EhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for EhFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Augmentation","synthetic":false,"types":[]},{"text":"impl Copy for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian:&nbsp;Copy&gt; Copy for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for ReaderOffsetId","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugAbbrev&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttributeSpecification","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLine&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for LineRow","synthetic":false,"types":[]},{"text":"impl Copy for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for FileEntryFormat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLoc&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLocLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for LocationLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for LocationListEntry&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for DieReference&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for Expression&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for OperationIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugRanges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugRngLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for RangeLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Range","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugStrOffsets&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugLineStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for UnitOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Offset:&nbsp;Copy&gt; Copy for UnitType&lt;Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy, Offset:&nbsp;Copy&gt; Copy for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy + Reader&gt; Copy for Attribute&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R:&nbsp;Copy + Reader&gt; Copy for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for DebugTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ValueType","synthetic":false,"types":[]},{"text":"impl Copy for Value","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl Copy for ErrorCode","synthetic":false,"types":[]},{"text":"impl Copy for ErrorClass","synthetic":false,"types":[]},{"text":"impl Copy for RepositoryState","synthetic":false,"types":[]},{"text":"impl Copy for Direction","synthetic":false,"types":[]},{"text":"impl Copy for ResetType","synthetic":false,"types":[]},{"text":"impl Copy for ObjectType","synthetic":false,"types":[]},{"text":"impl Copy for ReferenceType","synthetic":false,"types":[]},{"text":"impl Copy for BranchType","synthetic":false,"types":[]},{"text":"impl Copy for ConfigLevel","synthetic":false,"types":[]},{"text":"impl Copy for FileFavor","synthetic":false,"types":[]},{"text":"impl Copy for Sort","synthetic":false,"types":[]},{"text":"impl Copy for CredentialType","synthetic":false,"types":[]},{"text":"impl Copy for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl Copy for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl Copy for IndexAddOption","synthetic":false,"types":[]},{"text":"impl Copy for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl Copy for RevparseMode","synthetic":false,"types":[]},{"text":"impl Copy for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl Copy for MergePreference","synthetic":false,"types":[]},{"text":"impl Copy for CloneLocal","synthetic":false,"types":[]},{"text":"impl Copy for Service","synthetic":false,"types":[]},{"text":"impl Copy for DiffBinaryKind","synthetic":false,"types":[]},{"text":"impl Copy for Oid","synthetic":false,"types":[]},{"text":"impl Copy for StatusShow","synthetic":false,"types":[]},{"text":"impl Copy for Time","synthetic":false,"types":[]},{"text":"impl Copy for IndexTime","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl Copy for Delta","synthetic":false,"types":[]},{"text":"impl Copy for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl Copy for PathspecFlags","synthetic":false,"types":[]},{"text":"impl Copy for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl Copy for DiffFormat","synthetic":false,"types":[]},{"text":"impl Copy for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl Copy for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl Copy for StashFlags","synthetic":false,"types":[]},{"text":"impl Copy for AttrCheckFlags","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Copy for MatchOptions","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Copy for Reason","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Copy for FromHexError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Copy for StatusCode","synthetic":false,"types":[]},{"text":"impl Copy for Version","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Copy for HttpDate","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["ident_case"] = [{"text":"impl Copy for RenameRule","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["ignore"] = [{"text":"impl Copy for WalkState","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Copy for IpAddrRange","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4AddrRange","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6AddrRange","synthetic":false,"types":[]},{"text":"impl Copy for IpNet","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Copy for IpSubnets","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Subnets","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Subnets","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for sched_param","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Copy for arpreq","synthetic":false,"types":[]},{"text":"impl Copy for arpreq_old","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for mmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for epoll_event","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for fpos64_t","synthetic":false,"types":[]},{"text":"impl Copy for rlimit64","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for spwd","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Copy for itimerspec","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for packet_mreq","synthetic":false,"types":[]},{"text":"impl Copy for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for msginfo","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for input_event","synthetic":false,"types":[]},{"text":"impl Copy for input_id","synthetic":false,"types":[]},{"text":"impl Copy for input_absinfo","synthetic":false,"types":[]},{"text":"impl Copy for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Copy for input_mask","synthetic":false,"types":[]},{"text":"impl Copy for ff_replay","synthetic":false,"types":[]},{"text":"impl Copy for ff_trigger","synthetic":false,"types":[]},{"text":"impl Copy for ff_envelope","synthetic":false,"types":[]},{"text":"impl Copy for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_effect","synthetic":false,"types":[]},{"text":"impl Copy for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for ucred","synthetic":false,"types":[]},{"text":"impl Copy for mntent","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Copy for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for arpd_request","synthetic":false,"types":[]},{"text":"impl Copy for inotify_event","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_response","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Copy for regmatch_t","synthetic":false,"types":[]},{"text":"impl Copy for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_tp","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_j1939","synthetic":false,"types":[]},{"text":"impl Copy for can_filter","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for dirent64","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Copy for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Copy for mq_attr","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_can_addr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_can","synthetic":false,"types":[]},{"text":"impl Copy for statx","synthetic":false,"types":[]},{"text":"impl Copy for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for __exit_status","synthetic":false,"types":[]},{"text":"impl Copy for __timeval","synthetic":false,"types":[]},{"text":"impl Copy for glob64_t","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for mallinfo","synthetic":false,"types":[]},{"text":"impl Copy for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Copy for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Copy for nlattr","synthetic":false,"types":[]},{"text":"impl Copy for rtentry","synthetic":false,"types":[]},{"text":"impl Copy for timex","synthetic":false,"types":[]},{"text":"impl Copy for ntptimeval","synthetic":false,"types":[]},{"text":"impl Copy for regex_t","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigset_t","synthetic":false,"types":[]},{"text":"impl Copy for sysinfo","synthetic":false,"types":[]},{"text":"impl Copy for msqid_ds","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for flock64","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for stat64","synthetic":false,"types":[]},{"text":"impl Copy for statfs64","synthetic":false,"types":[]},{"text":"impl Copy for statvfs64","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Copy for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Copy for user","synthetic":false,"types":[]},{"text":"impl Copy for mcontext_t","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for termios2","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Copy for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Copy for ucontext_t","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for sem_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for can_frame","synthetic":false,"types":[]},{"text":"impl Copy for canfd_frame","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl Copy for git_oid","synthetic":false,"types":[]},{"text":"impl Copy for git_strarray","synthetic":false,"types":[]},{"text":"impl Copy for git_oidarray","synthetic":false,"types":[]},{"text":"impl Copy for git_time","synthetic":false,"types":[]},{"text":"impl Copy for git_transfer_progress","synthetic":false,"types":[]},{"text":"impl Copy for git_buf","synthetic":false,"types":[]},{"text":"impl Copy for git_blame_options","synthetic":false,"types":[]},{"text":"impl Copy for git_blame_hunk","synthetic":false,"types":[]},{"text":"impl Copy for git_index_entry","synthetic":false,"types":[]},{"text":"impl Copy for git_index_time","synthetic":false,"types":[]}];
implementors["libnghttp2_sys"] = [{"text":"impl Copy for nghttp2_session","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_info","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_vec","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_rcbuf","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_nv","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_frame_hd","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_data_source","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_data_provider","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_data","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_priority_spec","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_headers","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_priority","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_rst_stream","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_settings_entry","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_settings","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_push_promise","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_ping","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_goaway","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_window_update","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_extension","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_frame","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_session_callbacks","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_mem","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_option","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_ext_altsvc","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_origin_entry","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_ext_origin","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_hd_deflater","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_hd_inflater","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_stream","synthetic":false,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl Copy for LIBSSH2_SFTP_ATTRIBUTES","synthetic":false,"types":[]},{"text":"impl Copy for LIBSSH2_SFTP_STATVFS","synthetic":false,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Copy for gz_header","synthetic":false,"types":[]},{"text":"impl Copy for z_stream","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;'a&gt; Copy for Name&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Copy for MimeGuess","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Copy for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Copy for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZFlush","synthetic":false,"types":[]},{"text":"impl Copy for MZStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZError","synthetic":false,"types":[]},{"text":"impl Copy for DataFormat","synthetic":false,"types":[]},{"text":"impl Copy for StreamResult","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Copy for PollOpt","synthetic":false,"types":[]},{"text":"impl Copy for Ready","synthetic":false,"types":[]},{"text":"impl Copy for Event","synthetic":false,"types":[]},{"text":"impl Copy for UnixReady","synthetic":false,"types":[]},{"text":"impl Copy for Token","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Copy for Protocol","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Copy for Entry","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Errno","synthetic":false,"types":[]},{"text":"impl Copy for AtFlags","synthetic":false,"types":[]},{"text":"impl Copy for OFlag","synthetic":false,"types":[]},{"text":"impl Copy for SealFlag","synthetic":false,"types":[]},{"text":"impl Copy for FdFlag","synthetic":false,"types":[]},{"text":"impl Copy for FlockArg","synthetic":false,"types":[]},{"text":"impl Copy for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Copy for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Copy for PosixFadviseAdvice","synthetic":false,"types":[]},{"text":"impl Copy for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Copy for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Copy for MsFlags","synthetic":false,"types":[]},{"text":"impl Copy for MntFlags","synthetic":false,"types":[]},{"text":"impl Copy for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Copy for FdFlag","synthetic":false,"types":[]},{"text":"impl Copy for MqAttr","synthetic":false,"types":[]},{"text":"impl Copy for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Copy for PollFd","synthetic":false,"types":[]},{"text":"impl Copy for PollFlags","synthetic":false,"types":[]},{"text":"impl Copy for OpenptyResult","synthetic":false,"types":[]},{"text":"impl Copy for ForkptyResult","synthetic":false,"types":[]},{"text":"impl Copy for CloneFlags","synthetic":false,"types":[]},{"text":"impl Copy for CpuSet","synthetic":false,"types":[]},{"text":"impl Copy for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Copy for LioOpcode","synthetic":false,"types":[]},{"text":"impl Copy for LioMode","synthetic":false,"types":[]},{"text":"impl Copy for AioCancelStat","synthetic":false,"types":[]},{"text":"impl Copy for EpollFlags","synthetic":false,"types":[]},{"text":"impl Copy for EpollOp","synthetic":false,"types":[]},{"text":"impl Copy for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Copy for EpollEvent","synthetic":false,"types":[]},{"text":"impl Copy for EfdFlags","synthetic":false,"types":[]},{"text":"impl Copy for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Copy for ProtFlags","synthetic":false,"types":[]},{"text":"impl Copy for MapFlags","synthetic":false,"types":[]},{"text":"impl Copy for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Copy for MsFlags","synthetic":false,"types":[]},{"text":"impl Copy for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Copy for Request","synthetic":false,"types":[]},{"text":"impl Copy for Event","synthetic":false,"types":[]},{"text":"impl Copy for Options","synthetic":false,"types":[]},{"text":"impl Copy for QuotaType","synthetic":false,"types":[]},{"text":"impl Copy for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Copy for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Copy for Dqblk","synthetic":false,"types":[]},{"text":"impl Copy for RebootMode","synthetic":false,"types":[]},{"text":"impl Copy for FdSet","synthetic":false,"types":[]},{"text":"impl Copy for Signal","synthetic":false,"types":[]},{"text":"impl Copy for SignalIterator","synthetic":false,"types":[]},{"text":"impl Copy for SaFlags","synthetic":false,"types":[]},{"text":"impl Copy for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Copy for SigSet","synthetic":false,"types":[]},{"text":"impl Copy for SigHandler","synthetic":false,"types":[]},{"text":"impl Copy for SigAction","synthetic":false,"types":[]},{"text":"impl Copy for SigevNotify","synthetic":false,"types":[]},{"text":"impl Copy for SigEvent","synthetic":false,"types":[]},{"text":"impl Copy for SfdFlags","synthetic":false,"types":[]},{"text":"impl Copy for AddressFamily","synthetic":false,"types":[]},{"text":"impl Copy for InetAddr","synthetic":false,"types":[]},{"text":"impl Copy for IpAddr","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4Addr","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6Addr","synthetic":false,"types":[]},{"text":"impl Copy for UnixAddr","synthetic":false,"types":[]},{"text":"impl Copy for SockAddr","synthetic":false,"types":[]},{"text":"impl Copy for NetlinkAddr","synthetic":false,"types":[]},{"text":"impl Copy for AlgAddr","synthetic":false,"types":[]},{"text":"impl Copy for LinkAddr","synthetic":false,"types":[]},{"text":"impl Copy for VsockAddr","synthetic":false,"types":[]},{"text":"impl Copy for ReuseAddr","synthetic":false,"types":[]},{"text":"impl Copy for ReusePort","synthetic":false,"types":[]},{"text":"impl Copy for TcpNoDelay","synthetic":false,"types":[]},{"text":"impl Copy for Linger","synthetic":false,"types":[]},{"text":"impl Copy for IpAddMembership","synthetic":false,"types":[]},{"text":"impl Copy for IpDropMembership","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6AddMembership","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6DropMembership","synthetic":false,"types":[]},{"text":"impl Copy for IpMulticastTtl","synthetic":false,"types":[]},{"text":"impl Copy for IpMulticastLoop","synthetic":false,"types":[]},{"text":"impl Copy for ReceiveTimeout","synthetic":false,"types":[]},{"text":"impl Copy for SendTimeout","synthetic":false,"types":[]},{"text":"impl Copy for Broadcast","synthetic":false,"types":[]},{"text":"impl Copy for OobInline","synthetic":false,"types":[]},{"text":"impl Copy for SocketError","synthetic":false,"types":[]},{"text":"impl Copy for KeepAlive","synthetic":false,"types":[]},{"text":"impl Copy for PeerCredentials","synthetic":false,"types":[]},{"text":"impl Copy for TcpKeepIdle","synthetic":false,"types":[]},{"text":"impl Copy for TcpKeepCount","synthetic":false,"types":[]},{"text":"impl Copy for TcpKeepInterval","synthetic":false,"types":[]},{"text":"impl Copy for RcvBuf","synthetic":false,"types":[]},{"text":"impl Copy for SndBuf","synthetic":false,"types":[]},{"text":"impl Copy for RcvBufForce","synthetic":false,"types":[]},{"text":"impl Copy for SndBufForce","synthetic":false,"types":[]},{"text":"impl Copy for SockType","synthetic":false,"types":[]},{"text":"impl Copy for AcceptConn","synthetic":false,"types":[]},{"text":"impl Copy for BindToDevice","synthetic":false,"types":[]},{"text":"impl Copy for OriginalDst","synthetic":false,"types":[]},{"text":"impl Copy for ReceiveTimestamp","synthetic":false,"types":[]},{"text":"impl Copy for IpTransparent","synthetic":false,"types":[]},{"text":"impl Copy for Mark","synthetic":false,"types":[]},{"text":"impl Copy for PassCred","synthetic":false,"types":[]},{"text":"impl Copy for TcpCongestion","synthetic":false,"types":[]},{"text":"impl Copy for Ipv4PacketInfo","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6RecvPacketInfo","synthetic":false,"types":[]},{"text":"impl Copy for UdpGsoSegment","synthetic":false,"types":[]},{"text":"impl Copy for UdpGroSegment","synthetic":false,"types":[]},{"text":"impl Copy for AlgSetAeadAuthSize","synthetic":false,"types":[]},{"text":"impl Copy for SockType","synthetic":false,"types":[]},{"text":"impl Copy for SockProtocol","synthetic":false,"types":[]},{"text":"impl Copy for SockFlag","synthetic":false,"types":[]},{"text":"impl Copy for MsgFlags","synthetic":false,"types":[]},{"text":"impl Copy for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Copy for IpMembershipRequest","synthetic":false,"types":[]},{"text":"impl Copy for Ipv6MembershipRequest","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for RecvMsg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for CmsgIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ControlMessage&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SockLevel","synthetic":false,"types":[]},{"text":"impl Copy for Shutdown","synthetic":false,"types":[]},{"text":"impl Copy for SFlag","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]},{"text":"impl Copy for FchmodatFlags","synthetic":false,"types":[]},{"text":"impl Copy for UtimensatFlags","synthetic":false,"types":[]},{"text":"impl Copy for Statfs","synthetic":false,"types":[]},{"text":"impl Copy for FsType","synthetic":false,"types":[]},{"text":"impl Copy for FsFlags","synthetic":false,"types":[]},{"text":"impl Copy for Statvfs","synthetic":false,"types":[]},{"text":"impl Copy for SysInfo","synthetic":false,"types":[]},{"text":"impl Copy for BaudRate","synthetic":false,"types":[]},{"text":"impl Copy for SetArg","synthetic":false,"types":[]},{"text":"impl Copy for FlushArg","synthetic":false,"types":[]},{"text":"impl Copy for FlowArg","synthetic":false,"types":[]},{"text":"impl Copy for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Copy for InputFlags","synthetic":false,"types":[]},{"text":"impl Copy for OutputFlags","synthetic":false,"types":[]},{"text":"impl Copy for ControlFlags","synthetic":false,"types":[]},{"text":"impl Copy for LocalFlags","synthetic":false,"types":[]},{"text":"impl Copy for TimeSpec","synthetic":false,"types":[]},{"text":"impl Copy for TimeVal","synthetic":false,"types":[]},{"text":"impl Copy for RemoteIoVec","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for IoVec&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UtsName","synthetic":false,"types":[]},{"text":"impl Copy for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Copy for WaitStatus","synthetic":false,"types":[]},{"text":"impl Copy for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Copy for InitFlags","synthetic":false,"types":[]},{"text":"impl Copy for Inotify","synthetic":false,"types":[]},{"text":"impl Copy for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for TimerFd","synthetic":false,"types":[]},{"text":"impl Copy for ClockId","synthetic":false,"types":[]},{"text":"impl Copy for TimerFlags","synthetic":false,"types":[]},{"text":"impl Copy for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl Copy for Expiration","synthetic":false,"types":[]},{"text":"impl Copy for ClockId","synthetic":false,"types":[]},{"text":"impl Copy for UContext","synthetic":false,"types":[]},{"text":"impl Copy for Uid","synthetic":false,"types":[]},{"text":"impl Copy for Gid","synthetic":false,"types":[]},{"text":"impl Copy for Pid","synthetic":false,"types":[]},{"text":"impl Copy for ForkResult","synthetic":false,"types":[]},{"text":"impl Copy for FchownatFlags","synthetic":false,"types":[]},{"text":"impl Copy for Whence","synthetic":false,"types":[]},{"text":"impl Copy for LinkatFlags","synthetic":false,"types":[]},{"text":"impl Copy for UnlinkatFlags","synthetic":false,"types":[]},{"text":"impl Copy for PathconfVar","synthetic":false,"types":[]},{"text":"impl Copy for SysconfVar","synthetic":false,"types":[]},{"text":"impl Copy for AccessFlags","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Copy for Architecture","synthetic":false,"types":[]},{"text":"impl Copy for AddressSize","synthetic":false,"types":[]},{"text":"impl Copy for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Copy for SectionKind","synthetic":false,"types":[]},{"text":"impl Copy for ComdatKind","synthetic":false,"types":[]},{"text":"impl Copy for SymbolKind","synthetic":false,"types":[]},{"text":"impl Copy for SymbolScope","synthetic":false,"types":[]},{"text":"impl Copy for RelocationKind","synthetic":false,"types":[]},{"text":"impl Copy for RelocationEncoding","synthetic":false,"types":[]},{"text":"impl Copy for FileFlags","synthetic":false,"types":[]},{"text":"impl Copy for SectionFlags","synthetic":false,"types":[]},{"text":"impl&lt;Section:&nbsp;Copy&gt; Copy for SymbolFlags&lt;Section&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Endianness","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]},{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for I64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for Bytes&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for StringTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ArchiveKind","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for SectionTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file&gt; Copy for CoffSymbolTable&lt;'data, 'file&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file&gt; Copy for CoffSymbol&lt;'data, 'file&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Copy + FileHeader&gt; Copy for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::SectionHeader: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Copy + FileHeader&gt; Copy for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Elf:&nbsp;Copy&gt; Copy for ElfSymbolTable&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: FileHeader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Endian: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Elf:&nbsp;Copy&gt; Copy for ElfSymbol&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'data: 'file,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: FileHeader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Endian: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Mach:&nbsp;Copy + MachHeader&gt; Copy for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Mach:&nbsp;Copy + MachHeader&gt; Copy for MachOSymbolTable&lt;'data, 'file, Mach&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, 'file, Mach:&nbsp;Copy + MachHeader&gt; Copy for MachOSymbol&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for SectionIndex","synthetic":false,"types":[]},{"text":"impl Copy for SymbolIndex","synthetic":false,"types":[]},{"text":"impl Copy for SymbolSection","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for SymbolMapName&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for ObjectMapEntry&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RelocationTarget","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Copy for CompressedData&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CompressionFormat","synthetic":false,"types":[]},{"text":"impl Copy for Header","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FileHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FileHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Ident","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SectionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SectionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for CompressionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for CompressionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Sym32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Sym64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Syminfo32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Syminfo64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rel32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rela32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rel64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Rela64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for ProgramHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for ProgramHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Dyn32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Dyn64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for NoteHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for NoteHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FatHeader","synthetic":false,"types":[]},{"text":"impl Copy for FatArch32","synthetic":false,"types":[]},{"text":"impl Copy for FatArch64","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for MachHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for MachHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LoadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LcStr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SegmentCommand32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SegmentCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Section32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Section64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Fvmlib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FvmlibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Dylib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubFrameworkCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubClientCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubUmbrellaCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SubLibraryCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for PreboundDylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylinkerCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for ThreadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for RoutinesCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for RoutinesCommand_64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DysymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibTableOfContents&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibModule32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibModule64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DylibReference&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for TwolevelHintsCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for TwolevelHint&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for PrebindCksumCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for UuidCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for RpathCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LinkeditDataCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for EncryptionInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for EncryptionInfoCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for VersionMinCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for BuildVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for BuildToolVersion&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DyldInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for LinkerOptionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SymSegCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for IdentCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for FvmfileCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for EntryPointCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for SourceVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for DataInCodeEntry&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for NoteCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Nlist32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Nlist64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy + Endian&gt; Copy for Relocation&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Copy for ScatteredRelocationInfo","synthetic":false,"types":[]},{"text":"impl Copy for ImageDosHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageOs2Header","synthetic":false,"types":[]},{"text":"impl Copy for ImageVxdHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageFileHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageDataDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageOptionalHeader32","synthetic":false,"types":[]},{"text":"impl Copy for ImageRomOptionalHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageOptionalHeader64","synthetic":false,"types":[]},{"text":"impl Copy for ImageNtHeaders64","synthetic":false,"types":[]},{"text":"impl Copy for ImageNtHeaders32","synthetic":false,"types":[]},{"text":"impl Copy for ImageRomHeaders","synthetic":false,"types":[]},{"text":"impl Copy for Guid","synthetic":false,"types":[]},{"text":"impl Copy for AnonObjectHeader","synthetic":false,"types":[]},{"text":"impl Copy for AnonObjectHeaderV2","synthetic":false,"types":[]},{"text":"impl Copy for AnonObjectHeaderBigobj","synthetic":false,"types":[]},{"text":"impl Copy for ImageSectionHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbol","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbolBytes","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbolEx","synthetic":false,"types":[]},{"text":"impl Copy for ImageSymbolExBytes","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolTokenDef","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolFunction","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolFunctionBeginEnd","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolWeak","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolSection","synthetic":false,"types":[]},{"text":"impl Copy for ImageAuxSymbolCrc","synthetic":false,"types":[]},{"text":"impl Copy for ImageRelocation","synthetic":false,"types":[]},{"text":"impl Copy for ImageLinenumber","synthetic":false,"types":[]},{"text":"impl Copy for ImageBaseRelocation","synthetic":false,"types":[]},{"text":"impl Copy for ImageArchiveMemberHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageExportDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageImportByName","synthetic":false,"types":[]},{"text":"impl Copy for ImageTlsDirectory64","synthetic":false,"types":[]},{"text":"impl Copy for ImageTlsDirectory32","synthetic":false,"types":[]},{"text":"impl Copy for ImageImportDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for ImageBoundImportDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for ImageBoundForwarderRef","synthetic":false,"types":[]},{"text":"impl Copy for ImageDelayloadDescriptor","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirectoryEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirectoryString","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDirStringU","synthetic":false,"types":[]},{"text":"impl Copy for ImageResourceDataEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageLoadConfigCodeIntegrity","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocationTable","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation32","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation64","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation32V2","synthetic":false,"types":[]},{"text":"impl Copy for ImageDynamicRelocation64V2","synthetic":false,"types":[]},{"text":"impl Copy for ImagePrologueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageEpilogueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageLoadConfigDirectory32","synthetic":false,"types":[]},{"text":"impl Copy for ImageLoadConfigDirectory64","synthetic":false,"types":[]},{"text":"impl Copy for ImageHotPatchInfo","synthetic":false,"types":[]},{"text":"impl Copy for ImageHotPatchBase","synthetic":false,"types":[]},{"text":"impl Copy for ImageHotPatchHashes","synthetic":false,"types":[]},{"text":"impl Copy for ImageArmRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageArm64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageAlpha64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageAlphaRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageEnclaveConfig32","synthetic":false,"types":[]},{"text":"impl Copy for ImageEnclaveConfig64","synthetic":false,"types":[]},{"text":"impl Copy for ImageEnclaveImport","synthetic":false,"types":[]},{"text":"impl Copy for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl Copy for ImageCoffSymbolsHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageDebugMisc","synthetic":false,"types":[]},{"text":"impl Copy for ImageFunctionEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImageFunctionEntry64","synthetic":false,"types":[]},{"text":"impl Copy for ImageSeparateDebugHeader","synthetic":false,"types":[]},{"text":"impl Copy for NonPagedDebugInfo","synthetic":false,"types":[]},{"text":"impl Copy for ImageArchitectureEntry","synthetic":false,"types":[]},{"text":"impl Copy for ImportObjectHeader","synthetic":false,"types":[]},{"text":"impl Copy for ImageCor20Header","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Copy for CMSOptions","synthetic":false,"types":[]},{"text":"impl Copy for PointConversionForm","synthetic":false,"types":[]},{"text":"impl Copy for Asn1Flag","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Copy for Index&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for MessageDigest","synthetic":false,"types":[]},{"text":"impl Copy for DigestBytes","synthetic":false,"types":[]},{"text":"impl Copy for Nid","synthetic":false,"types":[]},{"text":"impl Copy for OcspFlag","synthetic":false,"types":[]},{"text":"impl Copy for OcspResponseStatus","synthetic":false,"types":[]},{"text":"impl Copy for OcspCertStatus","synthetic":false,"types":[]},{"text":"impl Copy for OcspRevokedStatus","synthetic":false,"types":[]},{"text":"impl Copy for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Copy for Id","synthetic":false,"types":[]},{"text":"impl Copy for Padding","synthetic":false,"types":[]},{"text":"impl Copy for SrtpProfileId","synthetic":false,"types":[]},{"text":"impl Copy for ErrorCode","synthetic":false,"types":[]},{"text":"impl Copy for SslOptions","synthetic":false,"types":[]},{"text":"impl Copy for SslMode","synthetic":false,"types":[]},{"text":"impl Copy for SslMethod","synthetic":false,"types":[]},{"text":"impl Copy for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Copy for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Copy for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Copy for SslFiletype","synthetic":false,"types":[]},{"text":"impl Copy for StatusType","synthetic":false,"types":[]},{"text":"impl Copy for NameType","synthetic":false,"types":[]},{"text":"impl Copy for SniError","synthetic":false,"types":[]},{"text":"impl Copy for SslAlert","synthetic":false,"types":[]},{"text":"impl Copy for AlpnError","synthetic":false,"types":[]},{"text":"impl Copy for ClientHelloResponse","synthetic":false,"types":[]},{"text":"impl Copy for SslVersion","synthetic":false,"types":[]},{"text":"impl Copy for ShutdownResult","synthetic":false,"types":[]},{"text":"impl Copy for ShutdownState","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]},{"text":"impl Copy for Cipher","synthetic":false,"types":[]},{"text":"impl Copy for X509CheckFlags","synthetic":false,"types":[]},{"text":"impl Copy for X509VerifyFlags","synthetic":false,"types":[]},{"text":"impl Copy for X509VerifyResult","synthetic":false,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Copy for point_conversion_form_t","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Copy for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Copy for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Copy for ParkResult","synthetic":false,"types":[]},{"text":"impl Copy for UnparkResult","synthetic":false,"types":[]},{"text":"impl Copy for RequeueOp","synthetic":false,"types":[]},{"text":"impl Copy for FilterOp","synthetic":false,"types":[]},{"text":"impl Copy for UnparkToken","synthetic":false,"types":[]},{"text":"impl Copy for ParkToken","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl Copy for Lookahead","synthetic":false,"types":[]},{"text":"impl Copy for Atomicity","synthetic":false,"types":[]},{"text":"impl Copy for MatchDir","synthetic":false,"types":[]},{"text":"impl Copy for Assoc","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Copy for YesS3","synthetic":false,"types":[]},{"text":"impl Copy for NoS3","synthetic":false,"types":[]},{"text":"impl Copy for YesS4","synthetic":false,"types":[]},{"text":"impl Copy for NoS4","synthetic":false,"types":[]},{"text":"impl Copy for YesA1","synthetic":false,"types":[]},{"text":"impl Copy for NoA1","synthetic":false,"types":[]},{"text":"impl Copy for YesA2","synthetic":false,"types":[]},{"text":"impl Copy for NoA2","synthetic":false,"types":[]},{"text":"impl Copy for YesNI","synthetic":false,"types":[]},{"text":"impl Copy for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Copy, S4:&nbsp;Copy, NI:&nbsp;Copy&gt; Copy for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Copy&gt; Copy for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Copy for vec128_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec256_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for LineColumn","synthetic":false,"types":[]},{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Copy for SpanRange","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for BernoulliError","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl Copy for Exp","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for FisherF","synthetic":false,"types":[]},{"text":"impl Copy for StudentT","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy + SampleUniform&gt; Copy for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UniformDuration","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for WeightedError","synthetic":false,"types":[]},{"text":"impl Copy for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Copy for Open01","synthetic":false,"types":[]},{"text":"impl Copy for Standard","synthetic":false,"types":[]},{"text":"impl Copy for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Copy for OsRng","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]},{"text":"impl Copy for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Copy for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Range","synthetic":false,"types":[]}];
implementors["rustfix"] = [{"text":"impl Copy for Applicability","synthetic":false,"types":[]},{"text":"impl Copy for Filter","synthetic":false,"types":[]},{"text":"impl Copy for LinePosition","synthetic":false,"types":[]},{"text":"impl Copy for LineRange","synthetic":false,"types":[]}];
implementors["rustwide"] = [{"text":"impl Copy for MountKind","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Copy for Compat","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Copy for SigId","synthetic":false,"types":[]}];
implementors["simplelog"] = [{"text":"impl Copy for LevelPadding","synthetic":false,"types":[]},{"text":"impl Copy for ThreadPadding","synthetic":false,"types":[]},{"text":"impl Copy for ThreadLogMode","synthetic":false,"types":[]},{"text":"impl Copy for TerminalMode","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Copy for Domain","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Protocol","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for RangeLimits","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Copy for AddBounds","synthetic":false,"types":[]},{"text":"impl Copy for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for VariantAst&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl Copy for EntryType","synthetic":false,"types":[]},{"text":"impl Copy for HeaderMode","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Copy for ColorChoice","synthetic":false,"types":[]},{"text":"impl Copy for Color","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Copy for Timespec","synthetic":false,"types":[]},{"text":"impl Copy for PreciseTime","synthetic":false,"types":[]},{"text":"impl Copy for SteadyTime","synthetic":false,"types":[]},{"text":"impl Copy for Tm","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Copy + Array&gt; Copy for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Copy for SignalKind","synthetic":false,"types":[]},{"text":"impl Copy for Instant","synthetic":false,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Copy for BytesCodec","synthetic":false,"types":[]},{"text":"impl Copy for Builder","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Copy for B0","synthetic":false,"types":[]},{"text":"impl Copy for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Z0","synthetic":false,"types":[]},{"text":"impl Copy for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Copy, A:&nbsp;Copy&gt; Copy for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Greater","synthetic":false,"types":[]},{"text":"impl Copy for Less","synthetic":false,"types":[]},{"text":"impl Copy for Equal","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl&lt;'a&gt; Copy for TrieSetSlice&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Ascii&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for BidiClass","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Copy for Void","synthetic":false,"types":[]}];
implementors["xattr"] = [{"text":"impl Copy for UnsupportedPlatformError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()